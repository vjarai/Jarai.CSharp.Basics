using System;
using System.Diagnostics;

namespace Jarai.CSharp.Relation.Bidirectional
{
    public class Person
    {
        private readonly string _geburtsname;
        private int _anzahlEhen;

        public Person(string vorname, string nachname)
        {
            Vorname = vorname;
            Nachname = _geburtsname = nachname;
        }

        /// <summary>
        /// Der Nachname kann ausserhalb der Klasse Person gelesen werden (public get).
        /// Der Nachname kann nur von Methoden der Klasse Person geändert werden (private set).
        /// </summary>
        public string Nachname { get; private set; }

        /// <summary>
        /// Der Partner kann ausserhalb der Klasse Person gelesen werden (public get).
        /// Der Partner kann nur von Methoden der Klasse Person geändert werden (private set).
        /// </summary>
        public Person Partner { get; private set; }

        /// <summary>
        /// Der Vornamen kann ausserhalb der Klasse Person gelesen werden (public get).
        /// Der Vorname kann nur bei der Geburt (im Konstruktor) gesetzt werden (kein set).
        /// </summary>
        public string Vorname { get; }


        /// <summary>
        /// Liefert alle Daten der Person als Text 
        /// </summary>
        public override string ToString()
        {
            string ergebnis = "Guten Tag ich heisse " + Vorname + " " + Nachname;

            if (_geburtsname != Nachname)
            {
                ergebnis += " (geburtsname " + _geburtsname + ")";
            }

            // verheiratet ?
            if (Partner == null)
            {
                ergebnis += " und bin " + (_anzahlEhen == 0 ? "ledig." : "geschieden.");
            }
            else
            {
                ergebnis += " und bin verheiratet mit " + Partner.Vorname + " " + Partner.Nachname;
            }

            Debug.WriteLine(ergebnis);

            return ergebnis;
        }

        public void Heiraten(Person neuerPartner)
        {
            // heirate ich eine null?
            if (neuerPartner == null)
            {
                throw new InvalidOperationException(Vorname + " " + Nachname + " kann keine \"null\" heiraten");
            }

            // heirate ich mich selbst?
            if (neuerPartner == this)
            {
                throw new InvalidOperationException(Vorname + " " + Nachname + " kann sich nicht selbst heiraten");
            }

            // Bin ich bereits verheiratet?
            if (Partner != null)
            {
                throw new InvalidOperationException(Vorname + " " + Nachname + " ist bereits verheiratet");
            }

            // Ist mein partner verheiratet?
            if (neuerPartner.Partner != null)
            {
                throw new InvalidOperationException(neuerPartner.Vorname + " " + neuerPartner.Nachname + " ist bereits verheiratet");
            }

            // ich habe einen neuen partner
            Partner = neuerPartner;

            // Der partner meines partners bin ich
            neuerPartner.Partner = this;

            // mein partner nimmt meinen Namen an
            neuerPartner.Nachname = Nachname;

            ++_anzahlEhen;
            ++neuerPartner._anzahlEhen;
        }

        public void Trennen()
        {
            if (Partner == null)
            {
                throw new InvalidOperationException(Vorname + " " + Nachname + " ist nicht verheiratet.");
            }

            // Mein partner nimmt wieder seinen geburtsnamen an
            Partner.Nachname = Partner._geburtsname;

            // Ich nehme wieder meinen geburtsnamen an
            Nachname = _geburtsname;

            // Mein partner hat keinen partner mehr
            Partner.Partner = null;

            // Ich habe keinen partner mehr.
            Partner = null;
        }
    }
}
